package procatering;

/**
 * Person are an abstract class
 * <dl>
 * <dt>Constructor:</dt>
 * <dd>- String fn, String ln, String phone, String mail, int pCode</dd>
 * </dl>
 *
 * @author Team 17
 */
public abstract class Person {
	private String firstName;
	private String lastName;
	private String phoneNumber;
	private String email;
	private int postalCode;

	/**
	 * The constructor except all parameters have been checked and is correct before trying to create an object of person.
	 *
	 * @param fn    String
	 * @param ln    String
	 * @param phone String
	 * @param mail  String
	 * @param pCode String postal code
	 */
	public Person(String fn, String ln, String phone, String mail, int pCode) {
		firstName = fn;
		lastName = ln;
		phoneNumber = phone;
		email = mail;
		postalCode = pCode;
	}

	/**
	 * @return the String variable firstName
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * @return the String variable lastName
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * @return the String variable phoneNumber
	 */
	public String getPhoneNumber() {
		return phoneNumber;
	}

	/**
	 * @return the String variable email
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @return the String variable postalCode
	 */
	public int getPostalCode() {
		return postalCode;
	}


	/**
	 * Is to be used by the sub classes of this object.
	 * The method checks whether the Persons first name and phone number is the same.
	 *
	 * @param o object that want to be checked
	 * @return true if firstName and phoneNumber of the given object is the same as the current object; else false
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Person person = (Person) o;

		return firstName.toUpperCase().equals(person.firstName.toUpperCase()) && phoneNumber.equals(person.phoneNumber);

	}

	/**
	 * AutoGenerated hashCode() methode by the equals methode.
	 *
	 * @return int value by using the stringName.hashCode() methode.
	 */
	@Override
	public int hashCode() {
		int result = firstName.hashCode();
		result = 31 * result + phoneNumber.hashCode();
		return result;
	}

	/**
	 * Returns a string representation of the object.
	 *
	 * @return class information: <br>"Person{ firstName=" + firstName + ", lastName=" + lastName + ", phoneNumber=" + phoneNumber + ", email=" + email + '}';
	 */
	@Override
	public String toString() {
		return "Person{ firstName=" + firstName + ", lastName=" + lastName + ", phoneNumber=" + phoneNumber + ", email=" + email + '}';
	}
}